package com.mhurd.euler;

import com.mhurd.euler.helpers.EulerSolution;
import com.mhurd.euler.helpers.FibonacciSequence;
import com.mhurd.euler.helpers.LongStreamAdditions;

import java.util.stream.LongStream;

import static org.junit.Assert.assertEquals;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting
 * with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
 * the sum of the even-valued terms.
 * <p>
 * https://projecteuler.net/problem=2
 */
class Problem002_EvenFibonacciNumbers implements EulerSolution {

    private long solveForMaxValue(final long max) {
        final LongStream stream = FibonacciSequence.stream().filter(i -> i % 2 == 0);
        return LongStreamAdditions.wrap(stream)
                .conditionalReduce(
                        0,
                        (a, b) -> a + b,
                        i -> i < max);
    }

    public void solve() {
        final long result = solveForMaxValue(4000000);
        assertEquals(4613732, result);
    }

}
