package com.mhurd.euler;

import com.mhurd.euler.helpers.EulerSolution;
import com.mhurd.euler.helpers.TriangularNumbers;

import java.util.OptionalLong;
import java.util.stream.LongStream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
 * number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 * <p>
 * https://projecteuler.net/problem=12
 */
class Problem012_HighlyDivisibleTriangularNumber implements EulerSolution {

    private long countDivisors(long num) {
        return LongStream.rangeClosed(1, (long) Math.sqrt(num)).filter(divisor -> num % divisor == 0)
                .count() * 2;
        // For every exact divisor up to the square root, there is a corresponding
        // divisor above the square root. So times the result by 2.
    }

    private OptionalLong findFirstTriangularNumberWithMoreDivisorsThan(long num) {
        return TriangularNumbers.stream().filter(n -> countDivisors(n) > num).findFirst();
    }

    public void solve() {
        OptionalLong result = findFirstTriangularNumberWithMoreDivisorsThan(500L);
        assertTrue(result.isPresent());
        assertEquals(76576500L, result.getAsLong());
    }

}
